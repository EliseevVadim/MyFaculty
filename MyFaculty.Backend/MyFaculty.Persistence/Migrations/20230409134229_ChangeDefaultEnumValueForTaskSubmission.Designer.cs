// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyFaculty.Persistence;

namespace MyFaculty.Persistence.Migrations
{
    [DbContext(typeof(MFDbContext))]
    [Migration("20230409134229_ChangeDefaultEnumValueForTaskSubmission")]
    partial class ChangeDefaultEnumValueForTaskSubmission
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("AppUserInfoPost", b =>
                {
                    b.Property<int>("LikedPostsId")
                        .HasColumnType("int");

                    b.Property<int>("LikedUsersId")
                        .HasColumnType("int");

                    b.HasKey("LikedPostsId", "LikedUsersId");

                    b.HasIndex("LikedUsersId");

                    b.ToTable("userslikedposts");
                });

            modelBuilder.Entity("AppUserInformationPublic", b =>
                {
                    b.Property<int>("InformationPublicsId")
                        .HasColumnType("int");

                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.HasKey("InformationPublicsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("UsersAtInformationPublics");
                });

            modelBuilder.Entity("AppUserInformationPublic1", b =>
                {
                    b.Property<int>("BlockedPublicsId")
                        .HasColumnType("int");

                    b.Property<int>("BlockedUsersId")
                        .HasColumnType("int");

                    b.HasKey("BlockedPublicsId", "BlockedUsersId");

                    b.HasIndex("BlockedUsersId");

                    b.ToTable("UsersBlockedInPublics");
                });

            modelBuilder.Entity("AppUserStudyClub", b =>
                {
                    b.Property<int>("MembersId")
                        .HasColumnType("int");

                    b.Property<int>("StudyClubsId")
                        .HasColumnType("int");

                    b.HasKey("MembersId", "StudyClubsId");

                    b.HasIndex("StudyClubsId");

                    b.ToTable("UsersAtStudyClubs");
                });

            modelBuilder.Entity("AppUserStudyClub1", b =>
                {
                    b.Property<int>("ModeratorsId")
                        .HasColumnType("int");

                    b.Property<int>("StudyClubsAtModerationId")
                        .HasColumnType("int");

                    b.HasKey("ModeratorsId", "StudyClubsAtModerationId");

                    b.HasIndex("StudyClubsAtModerationId");

                    b.ToTable("UsersModeratesClubs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTeacher")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("TelegramLink")
                        .HasColumnType("longtext");

                    b.Property<string>("VKLink")
                        .HasColumnType("longtext");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CourseId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FacultyId");

                    b.HasIndex("GroupId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Auditorium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuditoriumName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("PositionInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Auditoriums");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<Guid>("CommentAttachmentsUid")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("TextContent")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CountryName")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .HasColumnType("longtext");

                    b.Property<int>("CourseNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Discipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisciplineName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("StateTransitionId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("ExpertSystemAnswers");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ExpertSystemStates");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemStateTransition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnswerId")
                        .HasColumnType("int");

                    b.Property<int>("FinalStateId")
                        .HasColumnType("int");

                    b.Property<int>("InitialStateId")
                        .HasColumnType("int");

                    b.Property<bool>("IsLast")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId")
                        .IsUnique();

                    b.HasIndex("FinalStateId");

                    b.HasIndex("InitialStateId");

                    b.ToTable("ExpertSystemStateTransitions");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OfficialWebsite")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bounds")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FacultyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.InformationPublic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("PublicName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublicName")
                        .IsUnique();

                    b.ToTable("InformationPublics");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Pair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AuditoriumId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DayOfWeekId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PairInfoId")
                        .HasColumnType("int");

                    b.Property<string>("PairName")
                        .HasColumnType("longtext");

                    b.Property<int>("PairRepeatingId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuditoriumId");

                    b.HasIndex("DayOfWeekId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PairInfoId");

                    b.HasIndex("PairRepeatingId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Pairs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.PairInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EndTime")
                        .HasColumnType("longtext");

                    b.Property<int>("PairNumber")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PairInfos");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.PairRepeating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RepeatingName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PairRepeatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 230, DateTimeKind.Local).AddTicks(1180),
                            RepeatingName = "Каждую неделю"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 230, DateTimeKind.Local).AddTicks(1888),
                            RepeatingName = "По верхней неделе"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 230, DateTimeKind.Local).AddTicks(1904),
                            RepeatingName = "По нижней неделе"
                        });
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PostAttachmentsUid")
                        .HasColumnType("char(36)");

                    b.Property<string>("TextContent")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("RegionName")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ScienceRank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RankName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("ScienceRanks");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.SecondaryObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("ObjectName")
                        .HasColumnType("longtext");

                    b.Property<string>("PositionInfo")
                        .HasColumnType("longtext");

                    b.Property<int>("SecondaryObjectTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("SecondaryObjectTypeId");

                    b.ToTable("SecondaryObjects");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.SecondaryObjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ObjectTypeName")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TypePath")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ObjectTypeName")
                        .IsUnique();

                    b.HasIndex("TypePath")
                        .IsUnique();

                    b.ToTable("SecondaryObjectTypes");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.StudyClub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ClubName")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.ToTable("StudyClubs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TaskSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ClubTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext")
                        .HasDefaultValue("SentForEvaluation");

                    b.Property<Guid>("SubmissionAttachmentsUid")
                        .HasColumnType("char(36)");

                    b.Property<string>("TextContent")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ClubTaskId");

                    b.ToTable("TaskSubmissions");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TaskSubmissionReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Attachments")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<Guid>("SubmissionReviewAttachmentsUid")
                        .HasColumnType("char(36)");

                    b.Property<string>("TextContent")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("SubmissionId")
                        .IsUnique();

                    b.ToTable("TaskSubmissionReviews");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FIO")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("longtext");

                    b.Property<int>("ScienceRankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("VerifiactionToken")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ScienceRankId");

                    b.HasIndex("VerifiactionToken")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TeacherDiscipline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherDisciplines");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.WorkDayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DaysName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DaysOfWeek");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 112, DateTimeKind.Local).AddTicks(8051),
                            DaysName = "Понедельник"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 118, DateTimeKind.Local).AddTicks(182),
                            DaysName = "Вторник"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 118, DateTimeKind.Local).AddTicks(215),
                            DaysName = "Среда"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 118, DateTimeKind.Local).AddTicks(218),
                            DaysName = "Четверг"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 118, DateTimeKind.Local).AddTicks(221),
                            DaysName = "Пятница"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2023, 4, 9, 16, 42, 28, 118, DateTimeKind.Local).AddTicks(225),
                            DaysName = "Суббота"
                        });
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ClubTask", b =>
                {
                    b.HasBaseType("MyFaculty.Domain.Entities.Post");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StudyClubId")
                        .HasColumnType("int");

                    b.HasIndex("StudyClubId");

                    b.ToTable("clubTasks");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.InfoPost", b =>
                {
                    b.HasBaseType("MyFaculty.Domain.Entities.Post");

                    b.Property<bool>("CommentsAllowed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("InfoPublicId")
                        .HasColumnType("int");

                    b.Property<int?>("StudyClubId")
                        .HasColumnType("int");

                    b.HasIndex("InfoPublicId");

                    b.HasIndex("StudyClubId");

                    b.ToTable("infoPosts");
                });

            modelBuilder.Entity("AppUserInfoPost", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.InfoPost", null)
                        .WithMany()
                        .HasForeignKey("LikedPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("LikedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserInformationPublic", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.InformationPublic", null)
                        .WithMany()
                        .HasForeignKey("InformationPublicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserInformationPublic1", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.InformationPublic", null)
                        .WithMany()
                        .HasForeignKey("BlockedPublicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("BlockedUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserStudyClub", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.StudyClub", null)
                        .WithMany()
                        .HasForeignKey("StudyClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AppUserStudyClub1", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("ModeratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.StudyClub", null)
                        .WithMany()
                        .HasForeignKey("StudyClubsAtModerationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.HasOne("MyFaculty.Domain.Entities.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId");

                    b.HasOne("MyFaculty.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId");

                    b.HasOne("MyFaculty.Domain.Entities.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId");

                    b.Navigation("City");

                    b.Navigation("Course");

                    b.Navigation("Faculty");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Auditorium", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Floor", "Floor")
                        .WithMany("Auditoriums")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Auditoriums")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.City", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Comment", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MyFaculty.Domain.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ParentComment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Course", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Courses")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemAnswer", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.ExpertSystemState", "ExpertSystemState")
                        .WithMany("Answers")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpertSystemState");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemStateTransition", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.ExpertSystemAnswer", "Answer")
                        .WithOne("ExpertSystemStateTransition")
                        .HasForeignKey("MyFaculty.Domain.Entities.ExpertSystemStateTransition", "AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.ExpertSystemState", "FinalState")
                        .WithMany("ExpertSystemFinalStateTransitions")
                        .HasForeignKey("FinalStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.ExpertSystemState", "InitialState")
                        .WithMany("ExpertSystemInitialStateTransitions")
                        .HasForeignKey("InitialStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("FinalState");

                    b.Navigation("InitialState");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Floor", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Faculty", "Faculty")
                        .WithMany("Floors")
                        .HasForeignKey("FacultyId");

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Group", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Course", "Course")
                        .WithMany("Groups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.InformationPublic", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", "Owner")
                        .WithMany("OwnedInformationPublics")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Pair", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Auditorium", "Auditorium")
                        .WithMany("Pairs")
                        .HasForeignKey("AuditoriumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.WorkDayOfWeek", "DayOfWeek")
                        .WithMany("Pairs")
                        .HasForeignKey("DayOfWeekId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.Discipline", "Discipline")
                        .WithMany("Pairs")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.Group", "Group")
                        .WithMany("Pairs")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.PairInfo", "PairInfo")
                        .WithMany("Pairs")
                        .HasForeignKey("PairInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.PairRepeating", "PairRepeating")
                        .WithMany("Pairs")
                        .HasForeignKey("PairRepeatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.Teacher", "Teacher")
                        .WithMany("Pairs")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditorium");

                    b.Navigation("DayOfWeek");

                    b.Navigation("Discipline");

                    b.Navigation("Group");

                    b.Navigation("PairInfo");

                    b.Navigation("PairRepeating");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Post", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Region", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.SecondaryObject", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Floor", "Floor")
                        .WithMany("SecondaryObjects")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.SecondaryObjectType", "SecondaryObjectType")
                        .WithMany("SecondaryObjects")
                        .HasForeignKey("SecondaryObjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("SecondaryObjectType");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.StudyClub", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", "Owner")
                        .WithMany("OwnedStudyClubs")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TaskSubmission", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", "Author")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.ClubTask", "ClubTask")
                        .WithMany("Submissions")
                        .HasForeignKey("ClubTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ClubTask");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TaskSubmissionReview", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.AppUser", "Reviewer")
                        .WithMany("SubmissionReviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.TaskSubmission", "TaskSubmission")
                        .WithOne("Review")
                        .HasForeignKey("MyFaculty.Domain.Entities.TaskSubmissionReview", "SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reviewer");

                    b.Navigation("TaskSubmission");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.ScienceRank", "ScienceRank")
                        .WithMany("Teachers")
                        .HasForeignKey("ScienceRankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScienceRank");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TeacherDiscipline", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Discipline", "Discipline")
                        .WithMany("TeacherDisciplines")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeacherDisciplines")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ClubTask", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Post", null)
                        .WithOne()
                        .HasForeignKey("MyFaculty.Domain.Entities.ClubTask", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.StudyClub", "OwningStudyClub")
                        .WithMany("ClubTasks")
                        .HasForeignKey("StudyClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwningStudyClub");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.InfoPost", b =>
                {
                    b.HasOne("MyFaculty.Domain.Entities.Post", null)
                        .WithOne()
                        .HasForeignKey("MyFaculty.Domain.Entities.InfoPost", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyFaculty.Domain.Entities.InformationPublic", "OwningInformationPublic")
                        .WithMany("InfoPosts")
                        .HasForeignKey("InfoPublicId");

                    b.HasOne("MyFaculty.Domain.Entities.StudyClub", "OwningStudyClub")
                        .WithMany("InfoPosts")
                        .HasForeignKey("StudyClubId");

                    b.Navigation("OwningInformationPublic");

                    b.Navigation("OwningStudyClub");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("OwnedInformationPublics");

                    b.Navigation("OwnedStudyClubs");

                    b.Navigation("Posts");

                    b.Navigation("SubmissionReviews");

                    b.Navigation("TaskSubmissions");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Auditorium", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Country", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Course", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Discipline", b =>
                {
                    b.Navigation("Pairs");

                    b.Navigation("TeacherDisciplines");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemAnswer", b =>
                {
                    b.Navigation("ExpertSystemStateTransition");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ExpertSystemState", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("ExpertSystemFinalStateTransitions");

                    b.Navigation("ExpertSystemInitialStateTransitions");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Faculty", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Floors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Floor", b =>
                {
                    b.Navigation("Auditoriums");

                    b.Navigation("SecondaryObjects");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Group", b =>
                {
                    b.Navigation("Pairs");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.InformationPublic", b =>
                {
                    b.Navigation("InfoPosts");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.PairInfo", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.PairRepeating", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ScienceRank", b =>
                {
                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.SecondaryObjectType", b =>
                {
                    b.Navigation("SecondaryObjects");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.StudyClub", b =>
                {
                    b.Navigation("ClubTasks");

                    b.Navigation("InfoPosts");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.TaskSubmission", b =>
                {
                    b.Navigation("Review");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("Auditoriums");

                    b.Navigation("Pairs");

                    b.Navigation("TeacherDisciplines");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.WorkDayOfWeek", b =>
                {
                    b.Navigation("Pairs");
                });

            modelBuilder.Entity("MyFaculty.Domain.Entities.ClubTask", b =>
                {
                    b.Navigation("Submissions");
                });
#pragma warning restore 612, 618
        }
    }
}
